name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Load .env into GitHub ENV
        run: |
          echo "Loading all variables from .env..."
          grep -v '^#' .env >> $GITHUB_ENV

      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:v${{ github.run_number }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:v${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          fingerprint: ${{ secrets.EC2_SSH_FINGERPRINT }}
          script: |
            echo "Deploying to AWS EC2 ..."
            
            # Ensure the SSH directory exists
            mkdir -p ~/.ssh

            # Disable strict host checking to prevent issues with host verification
            echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile /dev/null\n\n" >> ~/.ssh/config

            # Clear any old entries from known_hosts to avoid conflicts
            ssh-keygen -R ${{ secrets.EC2_PUBLIC_IP }}

            # Fetch the new SSH key from the server and add it to known_hosts
            ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

            # Starting directory
            cd /home/ubuntu

            # Check if the application directory exists, clone if it doesn't
            if [ ! -d "devops-jenkins-ci-cd" ]; then
              git clone https://github.com/SandyN12058/devops-githubactions-ci-cd.git
            fi

            # Navigate to the application directory
            cd devops-githubactions-ci-cd

            # Fetch the latest code from the repository
            git pull origin main

            # Pull the latest Docker images
            docker-compose pull

            # Stop and remove existing containers
            docker-compose down --remove-orphans

            # Docker Clean-up - remove dangling images, unused volumes & networks
            docker image prune -f
            docker volume prune -f
            docker network prune -f

            # Run the new containers
            docker-compose up -d --remove-orphans
